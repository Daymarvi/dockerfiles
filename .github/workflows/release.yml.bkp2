name: Release
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_2022:
    name: "[ Build 2022 images ]"
    runs-on: windows-2022
    strategy:
      fail-fast: False
      matrix:
        include:
          - application: puppet
            build_file: dockerfile
            os_version: ltsc2022
            os_type: windowsservercore
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: ${{ matrix.application }} ${{ matrix.os_type }} ${{ matrix.os_version }}
        shell: pwsh
        run: |
          cd $env:application
          $v = select-string -Path dockerfile -Pattern 'ARG VERSION'
          if ($v) { 
            $version = $v.ToString().split('=')[-1] 
          }
          if ($version) {
            $build = "docker build -f $env:build_file --build-arg OS_TYPE=$($env:os_type) --build-arg OS_VERSION=$($env:os_version) . -t jpatigny/$($env:application):$($version)-$($env:os_type)-$($env:os_version)"
            $push  = "docker push jpatigny/$($env:application):$($version)-$($env:os_type)-$($env:os_version)"
          }
          else {
            $build = "docker build -f $env:build_file --build-arg OS_TYPE=$($env:os_type) --build-arg OS_VERSION=$($env:os_version) . -t jpatigny/$($env:application):$($env:os_type)-$($env:os_version)"
            $push  = "docker push jpatigny/$($env:application):$($env:os_type)-$($env:os_version)"
          }
          
          Write-Host "+ Build command: $build"
          Write-Host "+ Push command: $push"
          Write-Host "+ Starting build..."
          Invoke-Expression $build
          if ($LASTEXITCODE -ne 0) {
            Throw "Build failed !"
          }
          Write-Host "Pushing image to dockerhub..."
          Invoke-Expression $push
        env:
          application: ${{ matrix.application }}
          build_file: ${{ matrix.build_file }}
          os_type: ${{ matrix.os_type }}
          os_version: ${{ matrix.os_version }}
  
  build_2019:
    name: "[ Build 2019 images ]"
    runs-on: windows-2019
    strategy:
      fail-fast: False
      matrix:
        include:
          - application: puppet
            build_file: dockerfile
            os_version: '1809'
            os_type: windowsservercore
            PUPPET_AGENT_VERSION: 6.28.0
            PDK_VERSION: 2.4.0.1
            RUBY_VERSION: 3.1.3.1
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: ${{ matrix.application }} ${{ matrix.app_version }} ${{ matrix.os_type }} ${{ matrix.os_version }}
        shell: pwsh
        run: |
          cd $env:application
          $v = select-string -Path dockerfile -Pattern 'ARG VERSION'
          if ($v) { 
            $version = $v.ToString().split('=')[-1] 
          }
          if ($version) {
            $build = "docker build -f $env:build_file --build-arg OS_TYPE=$($env:os_type) --build-arg OS_VERSION=$($env:os_version) . -t jpatigny/$($env:application):$($version)-$($env:os_type)-$($env:os_version)"
            $push  = "docker push jpatigny/$($env:application):$($version)-$($env:os_type)-$($env:os_version)"
          }
          else {
            $build = "docker build -f $env:build_file --build-arg OS_TYPE=$($env:os_type) --build-arg OS_VERSION=$($env:os_version) . -t jpatigny/$($env:application):$($env:os_type)-$($env:os_version)"
            $push  = "docker push jpatigny/$($env:application):$($env:os_type)-$($env:os_version)"
          }
          
          Write-Host "+ Build command: $build"
          Write-Host "+ Push command: $push"
          Write-Host "+ Starting build..."
          Invoke-Expression $build
          if ($LASTEXITCODE -ne 0) {
            Throw "Build failed !"
          }
          Write-Host "Pushing image to dockerhub..."
          Invoke-Expression $push
        env:
          application: ${{ matrix.application }}
          build_file: ${{ matrix.build_file }}
          os_type: ${{ matrix.os_type }}
          os_version: ${{ matrix.os_version }}
