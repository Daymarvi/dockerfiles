name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    name: "[ Build and push ${{ matrix.version }} images ]"
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: False
      matrix:
       include:
        - application: ['prometheus','blackbox_exporter','alertmanager','grafana']
          os_version: '1809'
          os_type: nanoserver
          os_image: windows-2019
        - application: ['powercli']
          os_version: ltsc2019
          os_type: windowsservercore
          os_image: windows-2019
        - application: ['prometheus','blackbox_exporter','alertmanager','grafana']
          os_version: ltsc2022
          os_type: nanoserver
          os_image: windows-2019
        - application: ['powercli']
          os_version: ltsc2022
          os_type: windowsservercore
          os_image: windows-2022      
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: ${{ matrix.application }} ${{ matrix.os_type }} ${{ matrix.os_version }}
        shell: pwsh
        run: |
          cd $env:application
          $version = $(select-string -Path dockerfile.$($env:type)-$($env:version) -Pattern 'ENV (.+)_VERSION').ToString().split()[-1]
          docker build -f dockerfile.$($env:type)-$($env:version) . -t jpatigny/$($env:application):$($version)-$($env:type)-$($env:os_version)
          docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
        env:
          application: ${{ matrix.application }}
          type: ${{ matrix.os_type }}
          os_version: ${{ matrix.os_version }}
  #     -
  #       name: Blackbox nanoserver 1809
  #       shell: pwsh
  #       run: |
  #         $name = 'blackbox_exporter'
  #         $os_type    = 'nanoserver'
  #         $os_version = '1809'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV BLACKBOX_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: alertmanager nanoserver 1809
  #       shell: pwsh
  #       run: |
  #         $name       = 'alertmanager'
  #         $os_type    = 'nanoserver'
  #         $os_version = '1809'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV ALERTMANAGER_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: grafana nanoserver 1809
  #       shell: pwsh
  #       run: |
  #         $name       = 'grafana'
  #         $os_type    = 'nanoserver'
  #         $os_version = '1809'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV grafana_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: powercli windowsservercore ltsc2019
  #       shell: pwsh
  #       run: |
  #         $name       = 'powercli'
  #         $os_type    = 'windowsservercore'
  #         $os_version = 'ltsc2019'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV POWERCLI_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)

  # build_push_ltsc2022:
  #   name: Build and push ltsc2022 images
  #   runs-on: windows-2022
  #   steps:
  #     -
  #       name: Checkout code
  #       uses: actions/checkout@v2
  #     -
  #       name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     -
  #       name: Prometheus nanoserver ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name       = 'prometheus'
  #         $os_type    = 'nanoserver'
  #         $os_version = 'ltsc2022'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV PROMETHEUS_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: Blackbox nanoserver ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name = 'blackbox_exporter'
  #         $os_type    = 'nanoserver'
  #         $os_version = 'ltsc2022'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV BLACKBOX_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: alertmanager nanoserver ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name       = 'alertmanager'
  #         $os_type    = 'nanoserver'
  #         $os_version = 'ltsc2022'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV ALERTMANAGER_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: grafana nanoserver ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name       = 'grafana'
  #         $os_type    = 'nanoserver'
  #         $os_version = 'ltsc2022'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV grafana_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: powercli windowsservercore ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name       = 'powercli'
  #         $os_type    = 'windowsservercore'
  #         $os_version = 'ltsc2022'
  #         cd $name
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV POWERCLI_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #     -
  #       name: windows exporter windowsservercore ltsc2022
  #       shell: pwsh
  #       run: |
  #         $name       = 'windows_exporter'
  #         cd windows_exporter
  #         $os_type    = 'windowsservercore'
  #         $os_version = 'ltsc2022'
  #         $version    = $(select-string -Path dockerfile.$($os_type)-$($os_version) -Pattern "ENV WINDOWS_EXPORTER_VERSION").ToString().split()[-1]
  #         docker build -f dockerfile.$($os_type)-$($os_version) . -t jpatigny/$($name):$($version)-$($os_type)-$($os_version)
  #         docker push jpatigny/$($name):$($version)-$($os_type)-$($os_version)
