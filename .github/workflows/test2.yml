name: test-modif-files

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: ["windows-2019"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.
      - name: Get changed files
        id: check
        uses: tj-actions/changed-files@v29.0.7
      - name: List all changed files
        run: |
          $files = ("${{ steps.check.outputs.all_changed_files }}").split(' ')
          foreach ($file in $files) {
           Write-Host $file
          }
      - if: steps.check.outputs.any_changed == 'true'
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - if: steps.check.outputs.any_changed == 'true'
        name: build ${{ matrix.os }}
        shell: pwsh
        run: |
             # Get package list

             $files = ("${{ steps.check.outputs.all_changed_files }}").split(' ')
             $files = $files | Sort-Object -Unique
             foreach($file in $files) {

               $package = $file.split('/') | Select -First 1  
               if ($package -notmatch '.github') {
                
                cd $package
                $dockerfiles = Get-ChildItem -Path . -Filter 'dockerfile*'
                foreach($dockerfile in $dockerfiles.Name) {
                  
                  # Build args
                  if ("${{ matrix.os }}" -eq 'windows-2019')           { $OSVERSION = '1809' }
                  if ("${{ matrix.os }}" -eq 'windows-2022')           { $OSVERSION = 'ltsc2022' }                  
                  if ($dockerfile -match '^dockerfile$')               { $OSTYPE    = 'windowsservercore' }
                  if ($dockerfile -match '^dockerfile.nano(server)?$') { $OSTYPE    = 'nanoserver' }

                  Write-Host "Building $OSTYPE image from $dockerfile"
                  $v = select-string -Path $dockerfile -Pattern 'ARG VERSION'
                  if ($v) { 
                    [Version]$version = ($v.Line -split '=' | Select -Last 1).trim('"').trim("'")
                    $build = "docker build -f $dockerfile --build-arg OS_TYPE=$OSTYPE --build-arg OS_VERSION=$OSVERSION . -t $($env:GITHUB_REPOSITORY_OWNER)/$($package):$($version)-$($OSTYPE)-$($OSVERSION)"
                    $push  = "docker push $($env:GITHUB_REPOSITORY_OWNER)/$($package):$($version)-$($OSTYPE)-$($OSVERSION)"
                  }
                  else {
                    $build = "docker build -f $dockerfile --build-arg OS_TYPE=$OSTYPE --build-arg OS_VERSION=$OSVERSION . -t $($env:GITHUB_REPOSITORY_OWNER)/$($package):$($OSTYPE)-$($OSVERSION)"
                    $push  = "docker push $($env:GITHUB_REPOSITORY_OWNER)/$($package):$($OSTYPE)-$($OSVERSION)"
                  }
                  
                  Write-Host "+ Build command: $build"
                  Write-Host "+ Push command: $push"
                  Write-Host "+ Starting build..."
                  Invoke-Expression $build
                  if ($LASTEXITCODE -ne 0) {
                    Throw "Build failed !"
                  }
                  Write-Host "Pushing image to dockerhub..."
                  Invoke-Expression $push
                }
               }
               else {
                Write-Host "package is match '.github' folder. Not a package."
               }
             }

